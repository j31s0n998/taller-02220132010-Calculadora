/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package holamundo;



/**
 *
 * @author maria
 */
public class CalculadoraApp extends javax.swing.JFrame {

    /**
     * Creates new form CalculadoraApp
     */
    public CalculadoraApp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton10 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        pantalla = new javax.swing.JLabel();
        cmdBorrar = new javax.swing.JButton();
        cmd5 = new javax.swing.JButton();
        cmdBorrarUnidad = new javax.swing.JButton();
        cmd4 = new javax.swing.JButton();
        cmd6 = new javax.swing.JButton();
        cmd2 = new javax.swing.JButton();
        cmd3 = new javax.swing.JButton();
        cmd1 = new javax.swing.JButton();
        cmdPunto = new javax.swing.JButton();
        cmd0 = new javax.swing.JButton();
        cmdResultado = new javax.swing.JButton();
        cmdDivision = new javax.swing.JButton();
        cmdMultiplicacion = new javax.swing.JButton();
        cmdResta = new javax.swing.JButton();
        cmdSuma = new javax.swing.JButton();
        cmd8 = new javax.swing.JButton();
        cmd7 = new javax.swing.JButton();
        cmd9 = new javax.swing.JButton();
        cmdSalir = new javax.swing.JButton();

        jButton10.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        pantalla.setBackground(new java.awt.Color(255, 255, 255));
        pantalla.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pantalla.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 51)));
        pantalla.setOpaque(true);

        cmdBorrar.setText("C");
        cmdBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBorrarActionPerformed(evt);
            }
        });

        cmd5.setText("5");
        cmd5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd5ActionPerformed(evt);
            }
        });

        cmdBorrarUnidad.setText("<--");
        cmdBorrarUnidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBorrarUnidadActionPerformed(evt);
            }
        });

        cmd4.setText("4");
        cmd4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd4ActionPerformed(evt);
            }
        });

        cmd6.setText("6");
        cmd6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd6ActionPerformed(evt);
            }
        });

        cmd2.setText("2");
        cmd2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd2ActionPerformed(evt);
            }
        });

        cmd3.setText("3");
        cmd3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd3ActionPerformed(evt);
            }
        });

        cmd1.setText("1");
        cmd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd1ActionPerformed(evt);
            }
        });

        cmdPunto.setText(".");
        cmdPunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPuntoActionPerformed(evt);
            }
        });

        cmd0.setText("0");
        cmd0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd0ActionPerformed(evt);
            }
        });

        cmdResultado.setText("=");
        cmdResultado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdResultadoActionPerformed(evt);
            }
        });

        cmdDivision.setText("/");
        cmdDivision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDivisionActionPerformed(evt);
            }
        });

        cmdMultiplicacion.setText("x");
        cmdMultiplicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdMultiplicacionActionPerformed(evt);
            }
        });

        cmdResta.setText("-");
        cmdResta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRestaActionPerformed(evt);
            }
        });

        cmdSuma.setText("+");
        cmdSuma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSumaActionPerformed(evt);
            }
        });

        cmd8.setText("8");
        cmd8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd8ActionPerformed(evt);
            }
        });

        cmd7.setText("7");
        cmd7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd7ActionPerformed(evt);
            }
        });

        cmd9.setText("9");
        cmd9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd9ActionPerformed(evt);
            }
        });

        cmdSalir.setText("EXIT");
        cmdSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(pantalla, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 21, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmdBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmd1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmd7, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmdPunto, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmd8, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                                    .addComponent(cmdBorrarUnidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmd2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmd0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cmd4, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                .addComponent(cmd5, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cmd6, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmdResta, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cmd9, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmdMultiplicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmd3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmdSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmdSuma, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmdDivision, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(cmdResultado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pantalla, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdBorrarUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdMultiplicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmd7, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmd8, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmd9, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmd4, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmd5, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmd6, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdResta, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmd3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmdSuma, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmd1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmd2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmd0, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdPunto, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdDivision, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private boolean operadorAgregado = false; // Para controlar si se agregó un operador

    private void cmdSumaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSumaActionPerformed

 // Obtener el texto actual de la pantalla
    String textoActual = pantalla.getText(); 
    
    if (textoActual.isEmpty()) {
        return; // No agregar si no hay número
    }

    // Verificar si el último carácter es un operador
    char ultimoCaracter = textoActual.charAt(textoActual.length() - 1);
    if (ultimoCaracter == '*' || ultimoCaracter == '+' || ultimoCaracter == '-' || ultimoCaracter == '/') {
        return; // No agregar si el último carácter es un operador
    }

    // Agregar el operador de suma a la pantalla
    pantalla.setText(textoActual + " +"); 
    
    // Marcar que se ha agregado un operador para evitar duplicados
    operadorAgregado = true; 

    }//GEN-LAST:event_cmdSumaActionPerformed

    private void cmd7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd7ActionPerformed
        pantalla.setText(pantalla.getText() + "7"); 

        
    }//GEN-LAST:event_cmd7ActionPerformed

    private void cmdSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSalirActionPerformed
            System.exit(0);
    }//GEN-LAST:event_cmdSalirActionPerformed

    private void cmd0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd0ActionPerformed
    pantalla.setText(pantalla.getText() + "0"); 
    }//GEN-LAST:event_cmd0ActionPerformed

    private void cmd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd1ActionPerformed
    pantalla.setText(pantalla.getText() + "1"); 
    }//GEN-LAST:event_cmd1ActionPerformed

    private void cmd2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd2ActionPerformed
    pantalla.setText(pantalla.getText() + "2"); 
    }//GEN-LAST:event_cmd2ActionPerformed

    private void cmd3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd3ActionPerformed
    pantalla.setText(pantalla.getText() + "3"); 
    }//GEN-LAST:event_cmd3ActionPerformed

    private void cmd4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd4ActionPerformed
    pantalla.setText(pantalla.getText() + "4"); 
    }//GEN-LAST:event_cmd4ActionPerformed

    private void cmd5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd5ActionPerformed
    pantalla.setText(pantalla.getText() + "5"); 
    }//GEN-LAST:event_cmd5ActionPerformed

    private void cmd6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd6ActionPerformed
    pantalla.setText(pantalla.getText() + "6"); 
    }//GEN-LAST:event_cmd6ActionPerformed

    private void cmd8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd8ActionPerformed
    pantalla.setText(pantalla.getText() + "8"); 
    }//GEN-LAST:event_cmd8ActionPerformed

    private void cmd9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd9ActionPerformed
    pantalla.setText(pantalla.getText() + "9"); 
    }//GEN-LAST:event_cmd9ActionPerformed

    private void cmdBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBorrarActionPerformed
     pantalla.setText(""); 
    }//GEN-LAST:event_cmdBorrarActionPerformed

    private void cmdBorrarUnidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBorrarUnidadActionPerformed
       
        // Obtener el texto actual de la pantalla
    String textoActual = pantalla.getText(); 
    
    // Verificar que hay algo para borrar
    if (textoActual.length() > 0) { 
        // Eliminar el último carácter
        textoActual = textoActual.substring(0, textoActual.length() - 1); 
        
        // Actualizar la pantalla con el texto modificado
        pantalla.setText(textoActual);
    }

    }//GEN-LAST:event_cmdBorrarUnidadActionPerformed

    private void cmdMultiplicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdMultiplicacionActionPerformed
 
// Obtener el texto actual de la pantalla
    String textoActual = pantalla.getText(); 
    
    // Asegúrate de que haya un número antes de agregar el operador
    if (textoActual.isEmpty()) {
        return; // No agregar si no hay nada en la pantalla
    }

    // Verificar si el último carácter es un operador
    char ultimoCaracter = textoActual.charAt(textoActual.length() - 1);
    if (ultimoCaracter == '*' || ultimoCaracter == '+' || ultimoCaracter == '-' || ultimoCaracter == '/') {
        return; // No agregar si el último carácter es un operador
    }

    // Agregar el operador de multiplicación a la pantalla
    pantalla.setText(textoActual + " *"); 
    
    // Marcar que se ha agregado un operador
    operadorAgregado = true; 

    }//GEN-LAST:event_cmdMultiplicacionActionPerformed

    private void cmdResultadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdResultadoActionPerformed
// Obtener la expresión actual de la pantalla
    String expresion = pantalla.getText(); 
    
    // Validar que haya algo en la pantalla
    if (expresion.isEmpty()) {
        return; // Si no hay nada, no hacer nada
    }

    try {
        // Evaluar la expresión para obtener el resultado final
        double resultado = evaluarExpresion(expresion);
        
        // Mostrar el resultado en la pantalla
        pantalla.setText(Double.toString(resultado));
        
    } catch (ArithmeticException ex) { // Para errores como división por cero
        pantalla.setText("Error");
    } catch (IllegalArgumentException ex) { // Para errores de entrada
        pantalla.setText("Error");
    }

    }//GEN-LAST:event_cmdResultadoActionPerformed

    private void cmdRestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRestaActionPerformed
   // Obtener el texto actual de la pantalla
    String textoActual = pantalla.getText(); 
    
    if (textoActual.isEmpty()) {
        return; // No agregar si la pantalla está vacía
    }

    // Verificar si el último carácter es un operador
    char ultimoCaracter = textoActual.charAt(textoActual.length() - 1);
    if (ultimoCaracter == '*' || ultimoCaracter == '+' || ultimoCaracter == '-' || ultimoCaracter == '/') {
        return; // No agregar si el último carácter es un operador
    }

    // Agregar el operador de resta a la pantalla
    pantalla.setText(textoActual + " -"); 
    
    // Marcar que se ha agregado un operador para evitar duplicados
    operadorAgregado = true;

    }//GEN-LAST:event_cmdRestaActionPerformed

    private void cmdDivisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDivisionActionPerformed

     // Obtener el texto actual de la pantalla
    String textoActual = pantalla.getText(); 
    
    if (textoActual.isEmpty()) {
        return; // No agregar si la pantalla está vacía
    }

    // Verificar si el último carácter es un operador
    char ultimoCaracter = textoActual.charAt(textoActual.length() - 1);
    if (ultimoCaracter == '*' || ultimoCaracter == '+' || ultimoCaracter == '-' || ultimoCaracter == '/' || ultimoCaracter == '.') {
        return; // No agregar si el último carácter es un operador
    }

    // Agregar el operador de división a la pantalla
    pantalla.setText(textoActual + " /"); 
    
    // Marcar que se ha agregado un operador para evitar duplicados
    operadorAgregado = true; 
    }//GEN-LAST:event_cmdDivisionActionPerformed

    private void cmdPuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPuntoActionPerformed
    String textoActual = pantalla.getText(); 
    pantalla.setText(textoActual + "."); 


    }//GEN-LAST:event_cmdPuntoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculadoraApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculadoraApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculadoraApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculadoraApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalculadoraApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmd0;
    private javax.swing.JButton cmd1;
    private javax.swing.JButton cmd2;
    private javax.swing.JButton cmd3;
    private javax.swing.JButton cmd4;
    private javax.swing.JButton cmd5;
    private javax.swing.JButton cmd6;
    private javax.swing.JButton cmd7;
    private javax.swing.JButton cmd8;
    private javax.swing.JButton cmd9;
    private javax.swing.JButton cmdBorrar;
    private javax.swing.JButton cmdBorrarUnidad;
    private javax.swing.JButton cmdDivision;
    private javax.swing.JButton cmdMultiplicacion;
    private javax.swing.JButton cmdPunto;
    private javax.swing.JButton cmdResta;
    private javax.swing.JButton cmdResultado;
    private javax.swing.JButton cmdSalir;
    private javax.swing.JButton cmdSuma;
    private javax.swing.JButton jButton10;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel pantalla;
    // End of variables declaration//GEN-END:variables
private void agregarNumero(String numero) {
    pantalla.setText(pantalla.getText() + numero); // Agregar el número a la pantalla
    operadorAgregado = false; // Permitir agregar operadores nuevamente
}
    private double evaluarExpresion(String expresion) {
    StringBuilder numeroActual = new StringBuilder(); // Para construir números
    double resultado = 0; // Resultado final
    char operador = '+'; // Operador inicial
    boolean primerNumero = true; // Indica si es el primer número

    for (char c : expresion.toCharArray()) {
        if (Character.isDigit(c) || c == '.') { // Si es número o punto decimal
            numeroActual.append(c); 
        } else { // Si es operador
            if (numeroActual.length() > 0) {
                double numero = Double.parseDouble(numeroActual.toString()); 
                numeroActual.setLength(0); // Limpiar para el siguiente número
                
                if (primerNumero) {
                    resultado = numero; 
                    primerNumero = false; // Ya no es el primer número
                } else {
                    resultado = aplicarOperacion(resultado, operador, numero);
                }
            }

            operador = c; // Establecer el operador actual
        }
    }

    if (numeroActual.length() > 0) { // Agregar el último número
        double numero = Double.parseDouble(numeroActual.toString());
        resultado = aplicarOperacion(resultado, operador, numero);
    }

    return resultado; // Devuelve el resultado final
}

// Instancia de la clase Calculadora
private Calculadora calculadora = new Calculadora();

// Método para aplicar la operación según el operador
private double aplicarOperacion(double resultado, char operador, double numero) {
    switch (operador) {
        case '+':
            return calculadora.sumar(resultado, numero); // Llamar al método sumar
        case '-':
            return calculadora.restar(resultado, numero); // Llamar al método restar
        case '*':
            return calculadora.multiplicar(resultado, numero); // Llamar al método multiplicar
        case '/':
            if (numero == 0) {
                throw new ArithmeticException("División por cero"); // Manejar error
            }
            return calculadora.dividir(resultado, numero); // Llamar al método dividir
        default:
            throw new IllegalArgumentException("Operador no válido: " + operador); // Manejar operadores no válidos
    }
}
}